/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import DAO.BranchDAO;
import MODEL.Branch;
import database.databaseConnection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;

/**
 *
 * @author Windows
 */
public class BranchSection extends javax.swing.JFrame {

    /**
     * Creates new form BranchSection
     */
    public BranchSection() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtBranchNo = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtPostcode = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBranches = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnAdd.setBackground(new java.awt.Color(204, 204, 204));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(204, 204, 204));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 204, 204));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(204, 204, 204));
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        jLabel1.setText("Branch No:");

        jLabel2.setText("Street:");

        jLabel3.setText("Post Code:");

        jLabel4.setText("City:");

        btnSearch.setBackground(new java.awt.Color(204, 204, 204));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBranchNo, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(txtStreet)
                    .addComponent(txtCity)
                    .addComponent(txtPostcode))
                .addGap(16, 16, 16))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btnDelete)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearch))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btnAdd)
                                    .addGap(42, 42, 42)
                                    .addComponent(btnUpdate)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(btnView)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBranchNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(76, 76, 76)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(btnView)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        tblBranches.setBackground(new java.awt.Color(204, 204, 204));
        tblBranches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblBranches);

        jLabel5.setFont(new java.awt.Font("YouYuan", 0, 24)); // NOI18N
        jLabel5.setText("Branch");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(208, 208, 208))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(785, 487));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void clearFields() {
    txtBranchNo.setText("");
    txtStreet.setText("");
    txtCity.setText("");
    txtPostcode.setText("");

    // Reset focus to branch number field
    txtBranchNo.requestFocus();
}
private void loadBranches() {
    DefaultTableModel model = (DefaultTableModel) tblBranches.getModel();
    model.setRowCount(0); // Clear existing rows

    BranchDAO branchDAO = new BranchDAO();
    List<Branch> branches = branchDAO.getAllBranches(); // Retrieve branch list

    // Populate table with branch data
    for (Branch branch : branches) {
        model.addRow(new Object[]{
            branch.getBranchNo(),
            branch.getStreet(),
            branch.getCity(),
            branch.getPostcode()
        });
    }
}


private void refreshTable() {
    DefaultTableModel model = (DefaultTableModel) tblBranches.getModel();
    model.setRowCount(0); // Clear the table

    BranchDAO branchDAO = new BranchDAO();
    List<Branch> branches = branchDAO.getAllBranches(); // Fetch updated branch list

    for (Branch branch : branches) {
        model.addRow(new Object[]{branch.getBranchNo(), branch.getStreet(), branch.getCity(), branch.getPostcode()});
    }
}
public boolean branchExists(String branchNo) {
    String sql = "SELECT COUNT(*) FROM branch WHERE branchNo = ?";
    try (Connection conn = databaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        stmt.setString(1, branchNo);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getInt(1) > 0;
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}

public boolean hasRelatedProperties(String branchNo) {
    String sql = "SELECT COUNT(*) FROM propertyforrent WHERE branchNo = ?";
    try (Connection conn = databaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        stmt.setString(1, branchNo);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getInt(1) > 0; // Return true if there are related properties
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}


    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
                                         
    // Retrieve data from input fields
    String branchNo = txtBranchNo.getText().trim();
    String street = txtStreet.getText().trim();
    String city = txtCity.getText().trim();
    String postcode = txtPostcode.getText().trim();

    // Validate input fields
    if (branchNo.isEmpty() || street.isEmpty() || city.isEmpty() || postcode.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create Branch object
    Branch branch = new Branch(branchNo, street, city, postcode);

    // Call DAO to insert branch
    BranchDAO branchDAO = new BranchDAO();
    boolean success = branchDAO.addBranch(branch);

    // Show success or failure message
    if (success) {
        JOptionPane.showMessageDialog(this, "Branch added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        clearFields(); // Clear input fields
        loadBranches(); // Refresh the JTable
    } else {
        JOptionPane.showMessageDialog(this, "Error adding branch! Check for duplicate branch number.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
                                           
    // Retrieve selected branch ID
                                            
    String branchId = txtBranchNo.getText().trim();

    if (branchId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a Branch ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    BranchDAO branchDAO = new BranchDAO();
    Branch branch = branchDAO.getBranchById(branchId);

    if (branch != null) {
        branch.setStreet(txtStreet.getText().trim());
        branch.setCity(txtCity.getText().trim());
        branch.setPostcode(txtPostcode.getText().trim());

        if (branchDAO.updateBranch(branch)) {
            JOptionPane.showMessageDialog(this, "Branch updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            refreshTable(); // Refresh table after update
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update branch.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Branch not found.", "Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
                                        
    // Retrieve the branch ID from the input field
    String branchId = txtBranchNo.getText().trim();
    
    // Validate input
    if (branchId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a Branch ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create an instance of BranchDAO to interact with the database
    BranchDAO branchDAO = new BranchDAO();
    Branch branch = branchDAO.getBranchById(branchId);
    
    if (branch != null) {
        // Populate the fields with the retrieved branch data
        txtStreet.setText(branch.getStreet());
        txtCity.setText(branch.getCity());
        txtPostcode.setText(branch.getPostcode());
        
        JOptionPane.showMessageDialog(this, "Branch found.", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        // Refresh the table after search (optional)
        refreshTable();
    } else {
        JOptionPane.showMessageDialog(this, "Branch not found.", "Search Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
                                         
    // Retrieve the branch ID from the input field
  // Retrieve the branch ID from the input field
String branchId = txtBranchNo.getText().trim();

// Validate input
if (branchId.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Please enter a Branch Number to delete.", "Input Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Create an instance of BranchDAO to interact with the database
BranchDAO branchDAO = new BranchDAO();

// Check if the branch exists before attempting deletion
if (!branchDAO.branchExists(branchId)) {
    JOptionPane.showMessageDialog(this, "Branch ID does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Check if the branch is referenced in propertyforrent
if (branchDAO.hasRelatedProperties(branchId)) {
    int choice = JOptionPane.showConfirmDialog(this, 
        "This branch has associated properties. Deleting it will also delete those properties.\nDo you want to continue?", 
        "Confirm Deletion", JOptionPane.YES_NO_OPTION);

    if (choice == JOptionPane.NO_OPTION) {
        return;
    }
}

// Confirm deletion before proceeding
int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this branch?", 
                                            "Confirm Deletion", JOptionPane.YES_NO_OPTION);
if (confirm == JOptionPane.NO_OPTION) {
    return; // Exit if the user cancels
}

// Attempt to delete the branch
if (branchDAO.deleteBranch(branchId)) {
    JOptionPane.showMessageDialog(this, "Branch deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

    // Clear the input fields after deletion
    txtBranchNo.setText("");
    txtStreet.setText("");
    txtCity.setText("");
    txtPostcode.setText("");

    // Refresh table after deletion
    refreshTable();
} else {
    JOptionPane.showMessageDialog(this, "Error deleting branch. It may be referenced in another table.", "Deletion Error", JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
      refreshTable(); 
    }//GEN-LAST:event_btnViewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BranchSection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BranchSection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BranchSection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BranchSection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BranchSection().setVisible(true);
            }
        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBranches;
    private javax.swing.JTextField txtBranchNo;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtPostcode;
    private javax.swing.JTextField txtStreet;
    // End of variables declaration//GEN-END:variables
}
